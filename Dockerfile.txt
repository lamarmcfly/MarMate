# Multi-stage build for AI Assistant Platform
# Stage 1: Build the React frontend
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Add package files first for better caching
COPY frontend/package.json frontend/package-lock.json* frontend/pnpm-lock.yaml* ./

# Install dependencies (using pnpm if lock file exists, otherwise npm)
RUN if [ -f pnpm-lock.yaml ]; then \
        npm install -g pnpm && \
        pnpm install --frozen-lockfile; \
    else \
        npm ci; \
    fi

# Copy the rest of the frontend code
COPY frontend/ ./

# Set environment variables for production build
ENV NODE_ENV=production
ENV VITE_API_BASE_URL=/api
ENV VITE_WS_URL=ws://localhost/ws

# Build the application
RUN if [ -f pnpm-lock.yaml ]; then \
        pnpm run build; \
    else \
        npm run build; \
    fi

# Stage 2: Serve the app with Nginx
FROM nginx:stable-alpine

# Copy custom nginx config
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy the built app from the previous stage
COPY --from=build /app/dist /usr/share/nginx/html

# Add security headers
RUN echo "add_header X-Frame-Options SAMEORIGIN;" >> /etc/nginx/conf.d/default.conf && \
    echo "add_header X-Content-Type-Options nosniff;" >> /etc/nginx/conf.d/default.conf && \
    echo "add_header X-XSS-Protection \"1; mode=block\";" >> /etc/nginx/conf.d/default.conf && \
    echo "add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self' ws: wss:;\";" >> /etc/nginx/conf.d/default.conf

# Create non-root user for nginx
RUN adduser -D -H -u 1001 -s /sbin/nologin -G www-data www-data

# Set correct permissions
RUN chown -R www-data:www-data /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R www-data:www-data /var/cache/nginx && \
    chown -R www-data:www-data /var/log/nginx && \
    chown -R www-data:www-data /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R www-data:www-data /var/run/nginx.pid

# Switch to non-root user
USER www-data

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:8080/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
